## Summary of Changes in version 4.7 ##

### Interceptors ###

- Interceptors allow very flexible addition or redefinition of the behavior
  of each test method in a test class.  For example, this class will
  keep a log of each passing and failing test:
  
	public static class WatchmanTest {
		private static String watchedLog;

		@Interceptor
		public StatementInterceptor watchman= new TestWatchman() {
			@Override
			public void failed(Throwable e, FrameworkMethod method) {
				watchedLog+= method.getName() + " "
						+ e.getClass().getSimpleName() + "\n";
			}

			@Override
			public void succeeded(FrameworkMethod method) {
				watchedLog+= method.getName() + " " + "success!\n";
			}
		};

		@Test
		public void fails() {
			fail();
		}

		@Test
		public void succeeds() {
		}
	}

	For more on this feature, see http://www.threeriversinstitute.org/blog/?p=155

- The TestName Interceptor makes the current test name available inside test methods:

	public class NameInterceptorTest {
		@Interceptor public TestName name = new TestName();
		
		@Test public void testA() {
			assertEquals("testA", name.getMethodName());
		}
		
		@Test public void testB() {
			assertEquals("testB", name.getMethodName());
		}
	}

- The Timeout Interceptor applies the same timeout to all test methods in a class:

	public static class HasGlobalTimeout {
		public static String log;
		
		@Interceptor public StatementInterceptor globalTimeout = new Timeout(20);
		
		@Test public void testInfiniteLoop1() {
			log+= "ran1";
			for(;;) {}
		}
		
		@Test public void testInfiniteLoop2() {
			log+= "ran2";
			for(;;) {}
		}
	}

- The ExpectedException Interceptor allows in-test specification
  of expected exception types and messages:
    
	public static class HasExpectedException {
		@Interceptor
		public ExpectedException thrown= new ExpectedException();

		@Test
		public void throwsNothing() {

		}

		@Test
		public void throwsNullPointerException() {
			thrown.expect(NullPointerException.class);
			throw new NullPointerException();
		}

		@Test
		public void throwsNullPointerExceptionWithMessage() {
			thrown.expect(NullPointerException.class);
			thrown.expectMessage("happened?");
			throw new NullPointerException("What happened?");
		}
	}

### Timeouts ###
- Tests that time out now show the stack trace of the test thread.

### Matchers ###
- Hamcrest 1.2 is now incorporated (http://github.com/KentBeck/junit/issues#issue/1)
  - The following methods from `JUnitMatchers` are deprecated, and moved to `CoreMatchers`:
    - `JUnitMatchers.hasItem` is now `CoreMatchers.hasItem`
    - `JUnitMatchers.hasItems` is now `CoreMatchers.hasItems`
    - `JUnitMatchers.containsString` is now `CoreMatchers.containsString`

  - Matchers now have more informative mismatch descriptions.  For example:
  
      @SuppressWarnings("unchecked")
	  @Test public void stringIsAnInteger() {
	      assertThat("identifier", "actual", matches(is(Integer.class)));
	      // prints:
	      // Expected: is an instance of java.lang.Integer
	      //      but: \"actual\" is a java.lang.String
      }

  - Some matchers have slightly changed type signatures, especially those created
    by `is()` and `equalTo`.  Everything should work, except see `BothTest` for an
    example of how the `both().and()` and `either().or()` constructs may be
    affected

Expected: (is an instance of java.lang.Integer)\n     but: \"actual\" is a java.lang.String
      @SuppressWarnings("unchecked")
      public void testMismatchDescriptionDescribesFirstFailingMatch() {
    	  assertThat("bad speling", 
    	             allOf(containsString("bad"), containsString("spelling")));
    	  // prints: Expected: (contains string "bad" and contains string "spelling")
    	             but: contains string "spelling" was "bad speling"
	  }
  
### Docs ###
- Javadocs now link to online JDK javadocs (bug 2090230)
- Parameterized runner javadocs improved (bug 2186792)
- Fixed Javadoc code sample for AfterClass (2126279)
- Fixed Javadoc for assertArraysEqual(float[], float[])

### Bug fixes ###
- Fixed: BaseTestRunner.getTest() requires class to extend TestCase (1812200)
- Fixed: Suite does not allow for inheritance in annotations (2783118)
- Fixed: ParallelComputer skipped tests that took longer than 2 seconds
